import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.swing.*;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

/**
 *
 * @author MohammadRizkiMaulana_L0122096
 */
public class Responsi2_L0122096_MohammadRizkiMaulana_SC extends javax.swing.JFrame {
    
    File selectedImageFile;
    
    public Responsi2_L0122096_MohammadRizkiMaulana_SC() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackPanel = new javax.swing.JPanel();
        compressButton = new javax.swing.JButton();
        tittle = new javax.swing.JLabel();
        exstension = new javax.swing.JComboBox<>();
        chooseButton = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BackPanel.setBackground(new java.awt.Color(255, 255, 255));

        compressButton.setBackground(new java.awt.Color(0, 153, 255));
        compressButton.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        compressButton.setForeground(new java.awt.Color(255, 255, 255));
        compressButton.setText("Compress");
        compressButton.setBorder(new javax.swing.border.MatteBorder(null));
        compressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressButtonActionPerformed(evt);
            }
        });

        tittle.setBackground(new java.awt.Color(255, 255, 255));
        tittle.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        tittle.setForeground(new java.awt.Color(0, 0, 0));
        tittle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tittle.setText("Image Compressor");

        exstension.setBackground(new java.awt.Color(255, 255, 255));
        exstension.setFont(new java.awt.Font("JetBrains Mono NL", 0, 14)); // NOI18N
        exstension.setForeground(new java.awt.Color(0, 0, 0));
        exstension.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "jpg", "jpeg" }));
        exstension.setAlignmentY(1.0F);
        exstension.setBorder(new javax.swing.border.MatteBorder(null));
        exstension.setMaximumSize(new java.awt.Dimension(65, 30));

        chooseButton.setBackground(new java.awt.Color(255, 255, 255));
        chooseButton.setFont(new java.awt.Font("Poppins Thin", 1, 30)); // NOI18N
        chooseButton.setForeground(new java.awt.Color(0, 0, 0));
        chooseButton.setText("+");
        chooseButton.setAlignmentY(0.0F);
        chooseButton.setBorder(new javax.swing.border.MatteBorder(null));
        chooseButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        imageLabel.setBackground(new java.awt.Color(255, 255, 255));
        imageLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        imageLabel.setForeground(new java.awt.Color(153, 153, 153));
        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setText("Select thing you want to export");
        imageLabel.setToolTipText("");
        imageLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(153, 153, 153))); // NOI18N
        imageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imageLabel.setIconTextGap(0);
        imageLabel.setMaximumSize(new java.awt.Dimension(313, 166));
        imageLabel.setMinimumSize(new java.awt.Dimension(313, 166));
        imageLabel.setName(""); // NOI18N
        imageLabel.setPreferredSize(new java.awt.Dimension(313, 166));

        deleteButton.setBackground(new java.awt.Color(255, 51, 51));
        deleteButton.setFont(new java.awt.Font("JetBrains Mono NL", 0, 24)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Ã—");
        deleteButton.setBorder(new javax.swing.border.MatteBorder(null));
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackPanelLayout = new javax.swing.GroupLayout(BackPanel);
        BackPanel.setLayout(BackPanelLayout);
        BackPanelLayout.setHorizontalGroup(
            BackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackPanelLayout.createSequentialGroup()
                .addGap(0, 51, Short.MAX_VALUE)
                .addGroup(BackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BackPanelLayout.createSequentialGroup()
                        .addComponent(exstension, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(chooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(compressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BackPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(BackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tittle)
                            .addGroup(BackPanelLayout.createSequentialGroup()
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(49, 49, 49))
        );
        BackPanelLayout.setVerticalGroup(
            BackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(tittle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exstension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void compressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressButtonActionPerformed
         if (selectedImageFile != null && selectedImageFile.exists()) {
            try {
                BufferedImage originalImage = ImageIO.read(selectedImageFile);
                int width = originalImage.getWidth();
                int height = originalImage.getHeight();

                BufferedImage compressedImage = compressBlock(0, 0, width, height, originalImage);

                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Simpan Gambar Terkompresi");

                int userSelection = fileChooser.showSaveDialog(this); // Menampilkan dialog untuk menyimpan file

                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    String selectedExtension = (String) exstension.getSelectedItem();

                    String filePath = fileToSave.getAbsolutePath();

                    // Pastikan nama file memiliki ekstensi yang sesuai dengan pilihan ComboBox
                    if (!filePath.toLowerCase().endsWith("." + selectedExtension)) {
                        fileToSave = new File(filePath + "." + selectedExtension);
                    }

                    ImageIO.write(compressedImage, selectedExtension, fileToSave);
                    displaySelectedImage(fileToSave);

                    // Tampilkan informasi bahwa gambar terkompresi telah disimpan
                    System.out.println("Gambar terkompresi telah disimpan di " + fileToSave.getAbsolutePath());
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_compressButtonActionPerformed

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih Gambar");
    
        // Filter untuk memilih jenis file gambar
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                }
                
                String extension = getExtension(f);
                if (extension != null) {
                    return extension.equals("png") || extension.equals("jpg") || extension.equals("jpeg");
                }
                return false;
            }

            public String getDescription() {
                return "Gambar (JPG, JPEG, PNG)";
            }
        });

        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedImageFile = fileChooser.getSelectedFile();
            displaySelectedImage(selectedImageFile);
        }
    }//GEN-LAST:event_chooseButtonActionPerformed

    private String getExtension(File f) {
            String ext = null;
            String s = f.getName();
            int i = s.lastIndexOf('.');
            if (i > 0 && i < s.length() - 1) {
                ext = s.substring(i + 1).toLowerCase();
            }
            return ext;
    }
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Menghapus tampilan gambar dari JLabel
        imageLabel.setIcon(null); 
        imageLabel.setText("Select thing you want to export");
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void displaySelectedImage(File imageFile) {
        ImageIcon imageIcon = new ImageIcon(imageFile.getAbsolutePath());

        // Dapatkan ukuran JLabel
        int labelWidth = imageLabel.getWidth();
        int labelHeight = imageLabel.getHeight();

        // Resize gambar jika perlu
        Image image = imageIcon.getImage();
        Image newImage = image.getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);

        // Set ulang ikon dengan gambar yang telah diresize
        imageIcon = new ImageIcon(newImage);
        imageLabel.setIcon(imageIcon);
        
        // Setel teks menjadi null saat menampilkan gambar
        imageLabel.setText(null); 
    }
        
    // Metode untuk melakukan kompresi gambar menggunakan divide and conquer
    public BufferedImage compressBlock(int startX, int startY, int endX, int endY, BufferedImage originalImage) {
        int width = endX - startX;
        int height = endY - startY;

        if (width <= 4 || height <= 4) {
            // Base case: the block size is 4x4 or smaller
            BufferedImage subImage = originalImage.getSubimage(startX, startY, width, height);
            int avgRGB = getAverageColor(originalImage, startX, startY, endX, endY);
            fillBlock(subImage, avgRGB);

            return subImage;
        } else {
            // Recursive case: divide the image into four blocks and compress each one
            int midX = startX + width / 2;
            int midY = startY + height / 2;

            BufferedImage topLeft = compressBlock(startX, startY, midX, midY, originalImage);
            BufferedImage topRight = compressBlock(midX, startY, endX, midY, originalImage);
            BufferedImage bottomLeft = compressBlock(startX, midY, midX, endY, originalImage);
            BufferedImage bottomRight = compressBlock(midX, midY, endX, endY, originalImage);

            // Combine the four sub-blocks
            return combineImages(topLeft, topRight, bottomLeft, bottomRight);
        }
    }

    // Metode untuk mendapatkan rata-rata warna blok gambar
    private int getAverageColor(BufferedImage image, int startX, int startY, int endX, int endY) {
        int sumRed = 0;
        int sumGreen = 0;
        int sumBlue = 0;
        int blockPixels = 0;

        for (int x = startX; x < endX; x++) {
            for (int y = startY; y < endY; y++) {
                int rgb = image.getRGB(x, y);
                sumRed += (rgb >> 16) & 0xFF;
                sumGreen += (rgb >> 8) & 0xFF;
                sumBlue += rgb & 0xFF;
                blockPixels++;
            }
        }

        int avgRed = sumRed / blockPixels;
        int avgGreen = sumGreen / blockPixels;
        int avgBlue = sumBlue / blockPixels;

        return (avgRed << 16) | (avgGreen << 8) | avgBlue;
    }

    // Metode untuk mengisi blok gambar dengan warna tertentu
    private void fillBlock(BufferedImage image, int color) {
        int width = image.getWidth();
        int height = image.getHeight();

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                image.setRGB(x, y, color);
            }
        }
    }

    // Metode untuk menggabungkan empat gambar menjadi satu gambar
    public static BufferedImage combineImages(BufferedImage topLeft, BufferedImage topRight, BufferedImage bottomLeft, BufferedImage bottomRight) {
        int width = topLeft.getWidth() + topRight.getWidth();
        int height = topLeft.getHeight() + bottomLeft.getHeight();

        BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

        // Copy each sub-block into the result image
        result.getGraphics().drawImage(topLeft, 0, 0, null);
        result.getGraphics().drawImage(topRight, topLeft.getWidth(), 0, null);
        result.getGraphics().drawImage(bottomLeft, 0, topLeft.getHeight(), null);
        result.getGraphics().drawImage(bottomRight, topLeft.getWidth(), topLeft.getHeight(), null);

        return result;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Responsi2_L0122096_MohammadRizkiMaulana_SC frame = new Responsi2_L0122096_MohammadRizkiMaulana_SC();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel( new FlatLightLaf() );
//            UIManager.put( "Button.arc", 20 );
//            UIManager.put( "Component.arc", 20 );
            
        } catch( Exception ex ) {
            System.err.println( "Failed to initialize LaF" );
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Responsi2_L0122096_MohammadRizkiMaulana_SC().setVisible(true);
                
                 SwingUtilities.updateComponentTreeUI(frame);
            }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackPanel;
    private javax.swing.JButton chooseButton;
    private javax.swing.JButton compressButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> exstension;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel tittle;
    // End of variables declaration//GEN-END:variables
}
